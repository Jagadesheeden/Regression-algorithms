# -*- coding: utf-8 -*-
"""linear_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ypTTeASdcmBzqfWof5drebEc8mI_9T_E

Linear regression is useful for finding relationship between two continuous variables. One is predictor or independent variable and other is response or dependent variable. It looks for statistical relationship but not deterministic relationship. Relationship between two variables is said to be deterministic if one variable can be accurately expressed by the other.

The formula we are going to use for linear regression is y = mx+c
where y is the target(output),
      m is the feature(input),
      x is the coefficient,
      c is the intercept.

Things to know before building a model

Linear Regression calculates sum of squares of the distance from the linear equation in graph created to the actual output.

Best line is the one with least sum of squares.

We calculate sum of squares of error.

Error is calculated as distance from actual value to predicted value.

Error (Residual) = Actual Value - Predicted Value

Least Sum of Squares of Residuals will bring out the best model

First import the numpy, pandas and matplotlib packages
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""If you using google colab use this code for mounting your drive"""

from google.colab import drive
drive.mount('/content/drive')

"""Save your dataset in CSV format

Read the data from your dataset and store it under some name.

I am storing the dataset as salary_df
"""

salary_df = pd.read_csv('/content/Salary_Data.csv')

"""Head will print the top 5 values in the dataset

We will use yearsofexperience as feature and target as salary
"""

salary_df.head()

"""dtype will give you the data type of the column 

It will take only float values as features and tarrget
"""

salary_df.dtypes

"""Now we are converting features as numpy array"""

x = np.array(salary_df['YearsExperience'])

"""Printing the type of x"""

type(x)

x

"""Same as we did for x, we are converting the value of y to numpy, .value will change the array into numpy array"""

y = salary_df['Salary'].values
type(y)

y

"""Printing the shape of x and y, where the shape are in 1D we need to train our model only with 2D arrays"""

print(x.shape)
print(y.shape)

"""Reshape wll reshape the rows and column (-1,1) -1 is value of rows where the -1 will keep the rows remains the same and 1 is the column it will create a new column with no values"""

x = x.reshape(-1,1)
y = y.reshape(-1,1)

"""Now we can see the shape is converted to 2D arrays"""

print(x.shape)
print(y.shape)

x

y

"""Now comes the main part we need to split the data for training and tesing

Sklearn has a inbuild model for spliting the data for training and testing

Using the below code for importing the model from sklearn for splting the data for train and testing 

x_train, x_test,y_train,y_test is the format we need to give for train and test

test_size is the percentage data we need to give for test data

train_size is the percentage data we need to give for train data

We don't need to give both value if we give one the other will split for itslef

random_state will help to split the value in a random order


"""

from sklearn.model_selection import train_test_split
x_train, x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state = 2022)

"""Now we see how data is splitted for tesing and training """

print(x_train.shape)
print(y_train.shape)

print(x_test.shape)
print(y_test.shape)

x_train

x_test

y_train

y_test

"""Importin the linear regression model from sklearn and save it as regression"""

from sklearn.linear_model import LinearRegression 
regressor = LinearRegression()

"""Fitting the data into our model"""

regressor.fit(x_train,y_train)

""".coef we get the coeffiecent value"""

regressor.coef_

""".intercept will get the vlaue of the intercept value"""

regressor.intercept_

"""Storing the value of X_test value in y_pred to compare the predicted value and actual value"""

y_pred = regressor.predict(x_test)

"""printing the predicted value and actual value 

Our model seems goods some of the predicted value are closer to the actual value
"""

for i in range(0,len(y_pred)):
    print("Predicted: ",y_pred[i]," and Actual: ",y_test[i])

"""Plotting the model in a scatter plot using matplotlib"""

import matplotlib.pyplot as plt
plt.scatter(x,y)
plt.xlabel('Years of Experience')
plt.ylabel('Salary in INR')

"""Plotting the model in a plot chart using matplotlib we getting a straight line or a linear line

This is how we need to get for linear regression model
"""

import matplotlib.pyplot as plt
plt.plot(x,regressor.predict(x))
plt.xlabel('Years of Experience')
plt.ylabel('Predicted Salary in INR')

"""To predict the accuracy we use r-squared value

If the r-squared value is higher our model is good else if our r-squared value is low our model didn't work well

.score will give you the r-squared value

we got 95 percent accuracy our model works really well.
"""

regressor.score(x,y)*100

"""If you want to improve this value you can train the model by splitting the data in different size"""